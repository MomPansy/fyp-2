/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root.tsx';
import { Route as RegisterImport } from './routes/register.tsx';
import { Route as LoginImport } from './routes/login.tsx';
import { Route as StudentImport } from './routes/_student.tsx';
import { Route as AdminImport } from './routes/_admin.tsx';
import { Route as IndexImport } from './routes/index.tsx';
import { Route as StudentStudentDashboardImport } from './routes/_student.student.dashboard.tsx';
import { Route as AdminAdminDashboardImport } from './routes/_admin.admin.dashboard.tsx';
import { Route as AdminAdminAssessmentsCreateImport } from './routes/_admin.admin.assessments.create.tsx';

// Create/Update Routes

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any);

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any);

const StudentRoute = StudentImport.update({
  id: '/_student',
  getParentRoute: () => rootRoute,
} as any);

const AdminRoute = AdminImport.update({
  id: '/_admin',
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any);

const StudentStudentDashboardRoute = StudentStudentDashboardImport.update({
  id: '/student/dashboard',
  path: '/student/dashboard',
  getParentRoute: () => StudentRoute,
} as any);

const AdminAdminDashboardRoute = AdminAdminDashboardImport.update({
  id: '/admin/dashboard',
  path: '/admin/dashboard',
  getParentRoute: () => AdminRoute,
} as any);

const AdminAdminAssessmentsCreateRoute =
  AdminAdminAssessmentsCreateImport.update({
    id: '/admin/assessments/create',
    path: '/admin/assessments/create',
    getParentRoute: () => AdminRoute,
  } as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    '/_admin': {
      id: '/_admin';
      path: '';
      fullPath: '';
      preLoaderRoute: typeof AdminImport;
      parentRoute: typeof rootRoute;
    };
    '/_student': {
      id: '/_student';
      path: '';
      fullPath: '';
      preLoaderRoute: typeof StudentImport;
      parentRoute: typeof rootRoute;
    };
    '/login': {
      id: '/login';
      path: '/login';
      fullPath: '/login';
      preLoaderRoute: typeof LoginImport;
      parentRoute: typeof rootRoute;
    };
    '/register': {
      id: '/register';
      path: '/register';
      fullPath: '/register';
      preLoaderRoute: typeof RegisterImport;
      parentRoute: typeof rootRoute;
    };
    '/_admin/admin/dashboard': {
      id: '/_admin/admin/dashboard';
      path: '/admin/dashboard';
      fullPath: '/admin/dashboard';
      preLoaderRoute: typeof AdminAdminDashboardImport;
      parentRoute: typeof AdminImport;
    };
    '/_student/student/dashboard': {
      id: '/_student/student/dashboard';
      path: '/student/dashboard';
      fullPath: '/student/dashboard';
      preLoaderRoute: typeof StudentStudentDashboardImport;
      parentRoute: typeof StudentImport;
    };
    '/_admin/admin/assessments/create': {
      id: '/_admin/admin/assessments/create';
      path: '/admin/assessments/create';
      fullPath: '/admin/assessments/create';
      preLoaderRoute: typeof AdminAdminAssessmentsCreateImport;
      parentRoute: typeof AdminImport;
    };
  }
}

// Create and export the route tree

interface AdminRouteChildren {
  AdminAdminDashboardRoute: typeof AdminAdminDashboardRoute;
  AdminAdminAssessmentsCreateRoute: typeof AdminAdminAssessmentsCreateRoute;
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminAdminDashboardRoute: AdminAdminDashboardRoute,
  AdminAdminAssessmentsCreateRoute: AdminAdminAssessmentsCreateRoute,
};

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren);

interface StudentRouteChildren {
  StudentStudentDashboardRoute: typeof StudentStudentDashboardRoute;
}

const StudentRouteChildren: StudentRouteChildren = {
  StudentStudentDashboardRoute: StudentStudentDashboardRoute,
};

const StudentRouteWithChildren =
  StudentRoute._addFileChildren(StudentRouteChildren);

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '': typeof StudentRouteWithChildren;
  '/login': typeof LoginRoute;
  '/register': typeof RegisterRoute;
  '/admin/dashboard': typeof AdminAdminDashboardRoute;
  '/student/dashboard': typeof StudentStudentDashboardRoute;
  '/admin/assessments/create': typeof AdminAdminAssessmentsCreateRoute;
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '': typeof StudentRouteWithChildren;
  '/login': typeof LoginRoute;
  '/register': typeof RegisterRoute;
  '/admin/dashboard': typeof AdminAdminDashboardRoute;
  '/student/dashboard': typeof StudentStudentDashboardRoute;
  '/admin/assessments/create': typeof AdminAdminAssessmentsCreateRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/': typeof IndexRoute;
  '/_admin': typeof AdminRouteWithChildren;
  '/_student': typeof StudentRouteWithChildren;
  '/login': typeof LoginRoute;
  '/register': typeof RegisterRoute;
  '/_admin/admin/dashboard': typeof AdminAdminDashboardRoute;
  '/_student/student/dashboard': typeof StudentStudentDashboardRoute;
  '/_admin/admin/assessments/create': typeof AdminAdminAssessmentsCreateRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | '/'
    | ''
    | '/login'
    | '/register'
    | '/admin/dashboard'
    | '/student/dashboard'
    | '/admin/assessments/create';
  fileRoutesByTo: FileRoutesByTo;
  to:
    | '/'
    | ''
    | '/login'
    | '/register'
    | '/admin/dashboard'
    | '/student/dashboard'
    | '/admin/assessments/create';
  id:
    | '__root__'
    | '/'
    | '/_admin'
    | '/_student'
    | '/login'
    | '/register'
    | '/_admin/admin/dashboard'
    | '/_student/student/dashboard'
    | '/_admin/admin/assessments/create';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  AdminRoute: typeof AdminRouteWithChildren;
  StudentRoute: typeof StudentRouteWithChildren;
  LoginRoute: typeof LoginRoute;
  RegisterRoute: typeof RegisterRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRouteWithChildren,
  StudentRoute: StudentRouteWithChildren,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_admin",
        "/_student",
        "/login",
        "/register"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_admin": {
      "filePath": "_admin.tsx",
      "children": [
        "/_admin/admin/dashboard",
        "/_admin/admin/assessments/create"
      ]
    },
    "/_student": {
      "filePath": "_student.tsx",
      "children": [
        "/_student/student/dashboard"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/_admin/admin/dashboard": {
      "filePath": "_admin.admin.dashboard.tsx",
      "parent": "/_admin"
    },
    "/_student/student/dashboard": {
      "filePath": "_student.student.dashboard.tsx",
      "parent": "/_student"
    },
    "/_admin/admin/assessments/create": {
      "filePath": "_admin.admin.assessments.create.tsx",
      "parent": "/_admin"
    }
  }
}
ROUTE_MANIFEST_END */
